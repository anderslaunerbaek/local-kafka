services:
  zookeeper:
    image: "confluentinc/cp-zookeeper:${CONFLUENTINC_VERSION}"
    hostname: zookeeper
    container_name: zookeeper
    user: root
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ${DATA_DIR}/zoo-data:/var/lib/zookeeper/data
      - ${DATA_DIR}/zoo-log:/var/lib/zookeeper/log

  broker:
    image: "confluentinc/cp-server:${CONFLUENTINC_VERSION}"
    hostname: broker
    container_name: broker
    user: root
    depends_on:
      - zookeeper
    ports:
      - "29093:29093"
      - "9092:9092"
      - "9101:9101"
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_DIFF_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092,PLAINTEXT_DIFF_HOST://${HOST_DNS}:29093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    volumes:
      - ${DATA_DIR}/kafka-data:/var/lib/kafka/data

  schema-registry:
    image: "confluentinc/cp-schema-registry:${CONFLUENTINC_VERSION}"
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    restart: unless-stopped
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  control-center:
    image: "confluentinc/cp-enterprise-control-center:${CONFLUENTINC_VERSION}"
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    restart: unless-stopped
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: "http://connect:8083"
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  connect:
    build:
      context: ./connect
      args:
        CONFLUENTINC_VERSION: ${CONFLUENTINC_VERSION}
    hostname: connect
    container_name: connect
    user: root
    ports:
      - "8083:8083"
    restart: unless-stopped
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      # CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      # CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://${HOSTNAME_SCHEMA_REGISTRY}:8081
      # CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    volumes:
      - ${DATA_DIR}/connect:/data
    depends_on:
      - broker
      - schema-registry

  ksqldb-server:
    image: "confluentinc/cp-ksqldb-server:${CONFLUENTINC_VERSION}"
    hostname: ksqldb-server
    container_name: ksqldb-server
    user: root
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    restart: unless-stopped
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
    volumes:
      - ${DATA_DIR}/ksqldb:/etc/ksql
  
  
  # Access the cli by running:
  # > docker compose exec ksqldb-cli ksql http://ksqldb-server:8088
  ksqldb-cli:
    image: "confluentinc/cp-ksqldb-cli:${CONFLUENTINC_VERSION}"
    hostname: ksqldb-cli
    container_name: ksqldb-cli
    restart: unless-stopped
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    stdin_open: true

  rest-proxy:
    image: "confluentinc/cp-kafka-rest:${CONFLUENTINC_VERSION}"
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    restart: unless-stopped
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: "broker:29092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

  # mongo:
  #   image: mongo:latest
  #   restart: always
  #   ports:
  #     - '27017:27017'
  #   hostname: mongo
  #   container_name: mongo
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
  #     MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}

  # mongo-express:
  #   image: mongo-express:latest
  #   depends_on:
  #     - mongo
  #   ports:
  #     - 8084:8081
  #   hostname: mongo-express
  #   container_name: mongo-express
  #   restart: unless-stopped
  #   user: root
  #   environment:
  #     MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
  #     MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
  #     ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/
  #   volumes:
  #     - ${DATA_DIR}/mongo:/data/db

  # mysql:
  #   image: "mysql:${MYSQL_VERSION}"
  #   hostname: mysql
  #   container_name: mysql
  #   restart: unless-stopped
  #   user: root
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${MYSQL_DATABASE}
  #     MYSQL_USER: ${MYSQL_USER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #   ports:
  #     - 3306:3306
  #   volumes:
  #     - ${DATA_DIR}/mysql:/var/lib/mysql

  # postgres:
  #   image: "postgres:${PG_VERSION}"
  #   hostname: postgres
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: ${PG_USER}
  #     POSTGRES_PASSWORD: ${PG_PASSWORD}
  #     PGDATA: /data/postgres
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - ${DATA_DIR}/postgres:/data/postgres